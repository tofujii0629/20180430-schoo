#
# 設定ファイルの書き方については以下の公式ドキュメントにすべての説明が載っていますので、参考にしてください
# https://circleci.com/docs/2.0/configuration-reference/
#
version: 2
jobs:
  #
  # ビルドジョブを build という名前で定義しています
  #
  build:
    docker:
      #
      # ビルドジョブの実行環境としてどのDockerイメージを使うかを設定しています
      # あなたのアプリケーションの実装言語などに合わせて適切な環境を設定してください
      # CircleCI公式のDockerイメージの一覧は https://circleci.com/docs/2.0/circleci-images/ こちらにあります
      # dockerhub.com で公開されているDockerイメージであれば、CircleCI公式のものでなくとも利用可能です
      #
      - image: circleci/php

    steps:
      #
      # GitHubからコードをcheckoutします
      #
      - checkout

      #
      # run:
      #   command: <コマンド>
      # で任意のコマンドを実行できます
      # 例えばPHPのプロジェクトでユニットテストを実行したい場合は以下のように書けばよいでしょう
      #
      # - run:
      #     command: phpunit
      #
      - run:
          command: echo 'there are no tests yet'

  #
  # デプロイジョブを deploy という名前で定義しています
  #
  deploy:
    docker:
      #
      # Capistranoの実行にはrubyが必要なので、デプロイジョブの実行環境にはrubyのDockerイメージを使います
      #
      - image: circleci/ruby

    steps:
      #
      # GitHubからコードをcheckoutします（デプロイするのにもCapistranoの設定ファイルは必要なので）
      #
      - checkout

      #
      # CircleCiのプロジェクト設定画面で登録したSSH鍵のフィンガープリントを指定しています
      # これにより、当該SSH鍵がジョブの実行環境内に展開され、sshコマンド使用時にこの鍵が使われるようになります
      #
      # あなたのCircleCIのプロジェクト設定画面で登録したSSH鍵のフィンガープリントに置き換えてください
      #
      - add_ssh_keys:
          fingerprints:
            - CircleCIのプロジェクト設定画面で登録したSSH鍵のフィンガープリントをここに設定
            - MIIEpQIBAAKCAQEA61PMyhMKfJBW3TmrTGV7V4trmeoTgtmK41BYGg1ouT/8p3oe3u0vxXbCu7Rx8vW3G8wW5JXJ1+qfUGgAsSkaMnBQzClK1fzZNny/FfBbUGjAn0Lb8u0VVVwUAFV7n+utYjniTkglMEEPmFmZhm+bSATD8QBlOmWDYEHUnSJQ9547+GXe42RRXbzjPLyJs5BWX+GfPGOHftc3WtzW5vdHCkdpG3IO7uxFKPKJWChfRG8icwUL2MbT11TqmV2Mjw5oEDW7luWrAzRgnXm7k4DKA2tisRC9FFHwFO3NB6bcijEWXEbME1NzZ0t7gPNPIMgjBtKewh0g1hrOJODlPjwDBQIDAQABAoIBAFURjwdBiNnsp6oDLdxJFyRXfwc9qd30XBO+OIr6a/ADpIa6S6yUm19LhiuqmEKW9qFyzpfFWhjWdM7xOcbRL+op1dtn1eizJaZfxAffQnM32uH3nmEbuUmJJqXUQQNXg+7tM9TOmbru2f9d7HS/paeMKXTWisFobux9/6jp/dD0zg2Prs+Kp8MfD69w0gqs4In3LWzG58zbOzzVQ7zUgDdN6gT+tSfbYSFsSD5k0idtS3CcUEKixq/yPL2wXuf/K6UULTu9kCLs6AavezxR6ohkZrDI3DmZ/2wmjxe9+I04VNrdT5kO9aG4j2aIVMgkRKWQ3ZOVYgCPTbRixrc/WeUCgYEA9vD7ALgnmOQvvg+AFVCsQv3JXlGr6F3btBnQtbkEmI+PmSlXDcSQk7nqGb2LwiYH4t/afeq50wRvUTDVS8Jw5lkY82ZjAh05wBw5XzuPx559/2bwTyHrIMVejAXEIlBdwThKU1CgXSWhVmSyRGpyxYVq3hXfs+VHhA422noDcTcCgYEA8/XAugVmrRwKOW6gmPViyvxv2hbmCXtk6VBoZOM2aWktxo51GgM/CUl07gC3Ce4u2rbyZeqlhgIY7h2gEs5M1aQjrvsAl37ptKP3Bc1Ve7JcwF5e61URHp+pwgZ3dIbGWqC3NmBncF6UL7AwMTVKR+KIcwzKRdBGZpCtkw9G+6MCgYEAqU1miYO4gjZQFTqDUhnRQMzGtofAGLvg2YWpdi23XPFwPk39hU7y4JViTuuJWj7AwWdAYXwAkxBDUaLtWdehmAwV8yqLTvPCmFfBbe1kEjQzplto/pf+oKUwwUdixTPcU5DIRH7Os44NIzI+lnF05r8mGcVdbfUQJxWnvfpRSdkCgYEAnEEzh/IdqZLkGZT51/6ToF+/ZHh2LmySXb3an4PIPgvX/e0Qo/CgV1ptQmPC2OFtsTisWQrJqeN+BEWFWYY5QD05fcHWxzHKjqDWfyjdL7U2IyBOu3xo0qyBFnz91ezc7v8xWeq1Vgu97i1zMJFpWlGGA+qVQ9H6xYa1JhQK6vECgYEA3wo+u00D44bZUwHFlJOQBsV4moubFaKK7NLTphsC5d4GMf28Qw/qAjzEZhnowFWxf8Hj58IP+7OT7RikNoQF5f1Wen30+fWQ04LBDNWI1TmH+Pf3OIb/7GW8BiSTDeksSTe3nV1uutDPPvu++t2nOGbPQrXzRGxYuhNPIRFGA6c=
      #
      # deploy:
      #   command: <コマンド>
      # で任意のデプロイ用コマンドを実行できます
      # run と違って、これ以前のすべての処理が成功した場合にしか実行されません（テストが失敗した場合はデプロイされない）
      #
      # 以下のように "|" から始めると複数行のコマンドを設定することもできます
      # ここでは、ビルド対象のブランチが master である場合のみ処理するようにしてあります（masterブランチのみデプロイ対象とする）
      #
      - deploy:
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              gem install capistrano
              cap production deploy
            fi

#
# 上記で定義した各ジョブを、並列ではなく直列に実行させたい（ビルドジョブを実行したあとでデプロイジョブを実行させたい）ので
# "ワークフロー" としてジョブ同士の依存関係を定義します
#
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
